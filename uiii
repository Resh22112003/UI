To pass the response from your POST submission in the Form component to the DataTable component without refetching from the backend, you can use React Context. Here's a complete solution:


---

1. Create a shared context â€” DataContext.jsx

// src/DataContext.jsx
import React, { createContext, useState } from 'react';

export const DataContext = createContext();

export const DataProvider = ({ children }) => {
  const [submittedData, setSubmittedData] = useState([]);

  return (
    <DataContext.Provider value={{ submittedData, setSubmittedData }}>
      {children}
    </DataContext.Provider>
  );
};


---

2. Update main.jsx or App.jsx to wrap the app in the provider

// src/main.jsx or App.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import { BrowserRouter } from 'react-router-dom';
import { DataProvider } from './DataContext.jsx';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <DataProvider>
        <App />
      </DataProvider>
    </BrowserRouter>
  </React.StrictMode>
);


---

3. Update Form.jsx to store the response into context

// src/Form.jsx
import './Form.css';
import React, { useState, useContext } from 'react';
import { submitAPI1, submitAPI2, submitAPI3 } from './api.jsx';
import { useNavigate } from 'react-router-dom';
import { DataContext } from './DataContext.jsx';

function Form() {
  const navigate = useNavigate();
  const { setSubmittedData } = useContext(DataContext);

  const [neid, setNeid] = useState('');
  const [timeRange, setTimeRange] = useState('');
  const [fromDate, setFromDate] = useState('');
  const [fromHour, setFromHour] = useState('');
  const [fromMin, setFromMin] = useState('');
  const [fromSec, setFromSec] = useState('');
  const [toDate, setToDate] = useState('');
  const [toHour, setToHour] = useState('');
  const [toMin, setToMin] = useState('');
  const [toSec, setToSec] = useState('');
  const [portname, setportname] = useState('');
  const [monType, setMonType] = useState('');
  const [showTimestamp, setShowTimestamp] = useState(false);
  const [showportname, setShowportname] = useState(false);
  const [showMonType, setShowMonType] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      let response;
      const fromTimestamp = `${fromDate}-${fromHour}-${fromMin}-${fromSec}`;
      const toTimestamp = `${toDate}-${toHour}-${toMin}-${toSec}`;

      if (!showTimestamp && !showportname && !showMonType) {
        response = await submitAPI1({ neid, timeRange });
      } else if (showTimestamp && showportname && !showMonType) {
        response = await submitAPI2({ neid, fromTimestamp, toTimestamp, portname });
      } else if (showTimestamp && showportname && showMonType) {
        response = await submitAPI3({ neid, fromTimestamp, toTimestamp, portname, monType });
      } else {
        alert("Invalid form combination.");
        return;
      }

      const parsedData = JSON.parse(response);
      setSubmittedData(parsedData);
      navigate('/table');
    } catch (error) {
      console.error(error);
      alert("Submission failed.");
    }
  };

  return (
    <form className="form-container" onSubmit={handleSubmit}>
      {/* Form UI as in your original code */}
    </form>
  );
}

export default Form;


---

4. Update DataTable.jsx to use submitted data from context

// src/DataTable.jsx
import React, { useContext } from 'react';
import { DataContext } from './DataContext';
import './DataTable.css';

const TABLE_COLUMNS = ['neid', 'timestamp', 'portname', 'description', 'direction', 'kpis', 'location', 'unit'];

function DataTable() {
  const { submittedData } = useContext(DataContext);

  const downloadTable = () => {
    if (submittedData.length === 0) return;

    const csvRows = [
      TABLE_COLUMNS.join(','),
      ...submittedData.map(row =>
        TABLE_COLUMNS.map(col => `"${row[col] || ''}"`).join(',')
      )
    ];

    const blob = new Blob([csvRows.join('\n')], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'form-data.csv';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="json-table-container">
      <h2>Performance Data Table</h2>
      {submittedData.length === 0 ? (
        <p>No data to display.</p>
      ) : (
        <>
          <table className="json-table">
            <thead>
              <tr>
                {TABLE_COLUMNS.map((key) => (
                  <th key={key}>{key.toUpperCase()}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {submittedData.map((row, index) => (
                <tr key={index}>
                  {TABLE_COLUMNS.map((col) => (
                    <td key={col}>{row[col] || ''}</td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
          <button className="download-btn" onClick={downloadTable}>
            Download CSV
          </button>
        </>
      )}
    </div>
  );
}

export default DataTable;


---

Let me know if you want routing setup (App.jsx) or if the context should persist across page reloads using localStorage.

Here's your api.jsx file with submitAPI1, submitAPI2, and submitAPI3 functions, which use fetch to send POST requests to the backend endpoints.


---

api.jsx

// src/api.jsx

const API_BASE_URL = 'http://localhost:8080/api'; // Change this if your backend URL differs

export const submitAPI1 = async ({ neid, timeRange }) => {
  const response = await fetch(`${API_BASE_URL}/submit1`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ neid, timeRange }),
  });

  if (!response.ok) {
    throw new Error('Error in submitAPI1');
  }

  return response.text(); // assuming response is a JSON string
};

export const submitAPI2 = async ({ neid, fromTimestamp, toTimestamp, portname }) => {
  const response = await fetch(`${API_BASE_URL}/submit2`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ neid, fromTimestamp, toTimestamp, portname }),
  });

  if (!response.ok) {
    throw new Error('Error in submitAPI2');
  }

  return response.text();
};

export const submitAPI3 = async ({ neid, fromTimestamp, toTimestamp, portname, monType }) => {
  const response = await fetch(`${API_BASE_URL}/submit3`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ neid, fromTimestamp, toTimestamp, portname, monType }),
  });

  if (!response.ok) {
    throw new Error('Error in submitAPI3');
  }

  return response.text();
};


---

Let me know if you want to change response handling (e.g. return response.json() instead of response.text()), or if the API paths differ from /submit1, /submit2, and /submit3.

