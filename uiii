Thanks for the detailed code! Based on your requirements:

You want to send a POST request with neid to /api/endpoints.

The response JSON from that POST should be used in your DataTable UI.

So instead of GET in fetchFormData, we'll modify it to POST the neid, and update the DataTable component to support this.



---

✅ 1. Update your api.jsx file:

Replace fetchFormData() with a postNeidAndFetchData(data) function:

export const apiBase = 'http://localhost:8080/api';

export async function postNeidAndFetchData(payload) {
  const response = await fetch(`${apiBase}/endpoints`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ neid: payload.neid }),
  });

  if (!response.ok) {
    throw new Error("Failed to fetch data for NEID");
  }

  return await response.json(); // Return JSON response
}


---

✅ 2. Update your DataTable.jsx file to send neid and display the result:

import React, { useEffect, useState } from 'react';
import { postNeidAndFetchData } from './api.jsx';
import './DataTable.css';

const TABLE_COLUMNS = ['neid', 'timestamp', 'portname', 'description', 'direction', 'kpis', 'location', 'unit'];

function DataTable() {
  const [jsonData, setJsonData] = useState([]);
  const [neid, setNeid] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const data = await postNeidAndFetchData({ neid });
      setJsonData(data);
    } catch (err) {
      console.error("Fetch error:", err);
    }
    setLoading(false);
  };

  const downloadTable = () => {
    if (jsonData.length === 0) return;

    const csvRows = [
      TABLE_COLUMNS.join(','),
      ...jsonData.map(row =>
        TABLE_COLUMNS.map(col => `"${row[col] || ''}"`).join(',')
      )
    ];

    const blob = new Blob([csvRows.join('\n')], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.download = 'form-data.csv';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="json-table-container">
      <h2>Performance Data Table</h2>

      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Enter NEID"
          value={neid}
          onChange={(e) => setNeid(e.target.value)}
          required
        />
        <button type="submit">Fetch Data</button>
      </form>

      {loading ? (
        <p>Loading...</p>
      ) : jsonData.length === 0 ? (
        <p>No data available. Submit a NEID to fetch.</p>
      ) : (
        <>
          <table className="json-table">
            <thead>
              <tr>
                {TABLE_COLUMNS.map((key) => (
                  <th key={key}>{key.toUpperCase()}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {jsonData.map((row, index) => (
                <tr key={index}>
                  {TABLE_COLUMNS.map((col, i) => (
                    <td key={i}>{row[col] || ''}</td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
          <button className="download-btn" onClick={downloadTable}>
            Download CSV
          </button>
        </>
      )}
    </div>
  );
}

export default DataTable;


---

Summary:

api.jsx now uses POST with neid.

DataTable.jsx now includes a form to enter NEID, sends it to the backend, and displays the data dynamically.

Fully supports CSV download from the fetched JSON.


Let me know if you want to pass in additional parameters (like fromTimestamp, etc.), and I’ll extend the form accordingly.

